# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tsmo-QtO9whXuIW4rS_-cnFqrfmyk0kL
"""

import numpy as np
import cv2
from matplotlib import pyplot as plt
from scipy.ndimage.interpolation import map_coordinates
from scipy.ndimage.filters import gaussian_filter
import imutils

#this function does the elastic transformation.As written in the UNet paper, "Especially random elas- tic deformations of the training samples seem to be the key concept to train a segmentation network with very few annotated images."

def elastic_transform(image,alpha,sigma,alpha_affine,random_state=None):
    if random_state is None:
       random_state = np.random.RandomState(None)

    shape = image.shape
    shape_size = shape[:2]
    center_square = np.float32(shape_size) // 2
    square_size = min(shape_size) // 3
    pts1 = np.float32([center_square + square_size, [center_square[0]+square_size, center_square[1]-square_size], center_square - square_size])
    pts2 = pts1 + random_state.uniform(-alpha_affine, alpha_affine, size=pts1.shape).astype(np.float32)
    M = cv2.getAffineTransform(pts1, pts2)
    image = cv2.warpAffine(image, M, shape_size[::-1], borderMode=cv2.BORDER_REFLECT_101)

    dx = gaussian_filter((random_state.rand(*shape) * 2 - 1), sigma) * alpha
    dy = gaussian_filter((random_state.rand(*shape) * 2 - 1), sigma) * alpha
    #dz = np.zeros_like(dx)

    x, y = np.meshgrid(np.arange(shape[1]), np.arange(shape[0]))
    indices = np.reshape(y+dy, (-1, 1)), np.reshape(x+dx, (-1, 1))

    return map_coordinates(image, indices, order=1, mode='reflect').reshape(shape)

# Define function to draw a grid
def draw_grid(im, grid_size):
    # Draw grid lines
    for i in range(0, im.shape[1], grid_size):
        cv2.line(im, (i, 0), (i, im.shape[0]), color=(1,))
    for j in range(0, im.shape[0], grid_size):
        cv2.line(im, (0, j), (im.shape[1], j), color=(1,))

# Load images
im = cv2.imread('/content/51.jpg')

im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
#im_mask = cv2.imread('')
im=imutils.resize(im,height=500)
print(im.shape)

# Draw grid lines
draw_grid(im, 50)
plt.imshow(im,cmap='gray')

im_aug = elastic_transform(im, im.shape[1] * 2, im.shape[1] * 0.08, im.shape[1] * 0.08)
plt.figure(figsize=(16,14))

plt.imshow(im_aug,cmap='gray')